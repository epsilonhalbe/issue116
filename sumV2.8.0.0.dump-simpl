
==================== Tidy Core ====================
2016-05-16 17:08:44.308953495 UTC

Result size of Tidy Core = {terms: 57, types: 46, coercions: 9}

-- RHS size: {terms: 2, types: 0, coercions: 0}
Main.$trModule2 :: ghc-prim-0.5.0.0:GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
Main.$trModule2 = ghc-prim-0.5.0.0:GHC.Types.TrNameS "main"#

-- RHS size: {terms: 2, types: 0, coercions: 0}
Main.$trModule1 :: ghc-prim-0.5.0.0:GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 20}]
Main.$trModule1 = ghc-prim-0.5.0.0:GHC.Types.TrNameS "Main"#

-- RHS size: {terms: 3, types: 0, coercions: 0}
Main.$trModule :: ghc-prim-0.5.0.0:GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=DmdType m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
Main.$trModule =
  ghc-prim-0.5.0.0:GHC.Types.Module Main.$trModule2 Main.$trModule1

Rec {
-- RHS size: {terms: 17, types: 4, coercions: 0}
Main.main_$s$wfoldlM'_loop [Occ=LoopBreaker]
  :: ghc-prim-0.5.0.0:GHC.Prim.Int#
     -> ghc-prim-0.5.0.0:GHC.Prim.Int# -> ghc-prim-0.5.0.0:GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=DmdType <S,U><L,U>]
Main.main_$s$wfoldlM'_loop =
  \ (sc_sbZC :: ghc-prim-0.5.0.0:GHC.Prim.Int#)
    (sc1_sbZB :: ghc-prim-0.5.0.0:GHC.Prim.Int#) ->
    case ghc-prim-0.5.0.0:GHC.Prim.tagToEnum#
           @ Bool (ghc-prim-0.5.0.0:GHC.Prim.<=# sc_sbZC 100000000#)
    of _ [Occ=Dead] {
      False -> sc1_sbZB;
      True ->
        Main.main_$s$wfoldlM'_loop
          (ghc-prim-0.5.0.0:GHC.Prim.+# sc_sbZC 1#)
          (ghc-prim-0.5.0.0:GHC.Prim.+# sc1_sbZB sc_sbZC)
    }
end Rec }

-- RHS size: {terms: 14, types: 12, coercions: 0}
Main.main2 :: String
[GblId,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 100 30}]
Main.main2 =
  case Main.main_$s$wfoldlM'_loop 1# 0# of ww_sbIT { __DEFAULT ->
  case GHC.Show.$wshowSignedInt
         0# ww_sbIT (ghc-prim-0.5.0.0:GHC.Types.[] @ Char)
  of _ [Occ=Dead] { (# ww5_a89s, ww6_a89t #) ->
  ghc-prim-0.5.0.0:GHC.Types.: @ Char ww5_a89s ww6_a89t
  }
  }

-- RHS size: {terms: 6, types: 2, coercions: 0}
Main.main1
  :: ghc-prim-0.5.0.0:GHC.Prim.State#
       ghc-prim-0.5.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
             ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
           () #)
[GblId,
 Arity=1,
 Str=DmdType <S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 40 0}]
Main.main1 =
  \ (eta_a8iy [OS=OneShot]
       :: ghc-prim-0.5.0.0:GHC.Prim.State#
            ghc-prim-0.5.0.0:GHC.Prim.RealWorld) ->
    GHC.IO.Handle.Text.hPutStr2
      GHC.IO.Handle.FD.stdout
      Main.main2
      ghc-prim-0.5.0.0:GHC.Types.True
      eta_a8iy

-- RHS size: {terms: 1, types: 0, coercions: 3}
main :: IO ()
[GblId,
 Arity=1,
 Str=DmdType <S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main1
               `cast` (Sym (ghc-prim-0.5.0.0:GHC.Types.N:IO[0] <()>_R)
                       :: ((ghc-prim-0.5.0.0:GHC.Prim.State#
                              ghc-prim-0.5.0.0:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
                                    ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
                                  () #)) :: *)
                          ~R#
                          (IO () :: *))}]
main =
  Main.main1
  `cast` (Sym (ghc-prim-0.5.0.0:GHC.Types.N:IO[0] <()>_R)
          :: ((ghc-prim-0.5.0.0:GHC.Prim.State#
                 ghc-prim-0.5.0.0:GHC.Prim.RealWorld
               -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
                       ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
                     () #)) :: *)
             ~R#
             (IO () :: *))

-- RHS size: {terms: 2, types: 1, coercions: 3}
Main.main3
  :: ghc-prim-0.5.0.0:GHC.Prim.State#
       ghc-prim-0.5.0.0:GHC.Prim.RealWorld
     -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
             ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
           () #)
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 60}]
Main.main3 =
  GHC.TopHandler.runMainIO1
    @ ()
    (Main.main1
     `cast` (Sym (ghc-prim-0.5.0.0:GHC.Types.N:IO[0] <()>_R)
             :: ((ghc-prim-0.5.0.0:GHC.Prim.State#
                    ghc-prim-0.5.0.0:GHC.Prim.RealWorld
                  -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
                          ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
                        () #)) :: *)
                ~R#
                (IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 3}
:Main.main :: IO ()
[GblId,
 Arity=1,
 Str=DmdType,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Main.main3
               `cast` (Sym (ghc-prim-0.5.0.0:GHC.Types.N:IO[0] <()>_R)
                       :: ((ghc-prim-0.5.0.0:GHC.Prim.State#
                              ghc-prim-0.5.0.0:GHC.Prim.RealWorld
                            -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
                                    ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
                                  () #)) :: *)
                          ~R#
                          (IO () :: *))}]
:Main.main =
  Main.main3
  `cast` (Sym (ghc-prim-0.5.0.0:GHC.Types.N:IO[0] <()>_R)
          :: ((ghc-prim-0.5.0.0:GHC.Prim.State#
                 ghc-prim-0.5.0.0:GHC.Prim.RealWorld
               -> (# ghc-prim-0.5.0.0:GHC.Prim.State#
                       ghc-prim-0.5.0.0:GHC.Prim.RealWorld,
                     () #)) :: *)
             ~R#
             (IO () :: *))


